{"version":3,"sources":["components/BreakPoint.tsx","lib/utils.ts","lib/message.ts","components/FlowPreview.tsx","components/EditFlow.tsx","components/ViewFlow.tsx","lib/flow.ts","lib/connection.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BreakPoint","props","state","show","rule","method","url","action","haveRules","handleClose","bind","handleShow","handleSave","this","setState","rules","push","onSave","length","variant","Button","size","onClick","Modal","onHide","Header","closeButton","Title","Body","Form","Group","as","Row","Label","column","sm","Col","Control","value","onChange","e","target","parseInt","Footer","React","Component","isTextBody","payload","header","test","join","getSize","len","isNaN","toFixed","arrayBufferToBase64","buf","binary","bytes","Uint8Array","byteLength","i","String","fromCharCode","btoa","bufHexView","str","viewStr","toString","padStart","MessageType","FlowPreview","nextProps","isSelected","objA","objB","keysA","Object","keys","keysB","key","undefined","shallowEqual","flow","fp","classNames","waitIntercept","className","onShowDetail","no","host","path","contentType","statusCode","costTime","SendMessageType","allMessageBytes","CONN","CONN_CLOSE","REQUEST","REQUEST_BODY","RESPONSE","RESPONSE_BODY","buildMessageEdit","messageType","DROP_REQUEST","DROP_RESPONSE","view","set","TextEncoder","encode","id","body","CHANGE_REQUEST","request","CHANGE_RESPONSE","Error","response","ArrayBuffer","bodyLen","headerBytes","JSON","stringify","data","view2","DataView","setUint32","EditFlow","alertMsg","content","msg","firstLine","headerLines","map","valstr","bodyLines","TextDecoder","decode","stringifyRequest","stringifyResponse","when","firstIndex","indexOf","slice","split","secondIndex","vals","proto","parseRequest","showAlert","onChangeRequest","parseResponse","onChangeResponse","msgType","onMessage","rows","Alert","ViewFlow","flowTab","copied","requestBodyViewTab","responseBodyLineBreak","style","color","pv","previewResponseBody","type","src","keyStyle","stringStyle","valueStyle","booleanStyle","previewRequestBody","hexviewResponseBody","conn","getConn","serverConn","address","peername","clientConn","searchItems","search","searchParams","forEach","onClose","onReRenderFlows","padding","disabled","curl","fetchToCurl","headers","reduce","obj","requestBody","copy","setTimeout","marginBottom","isTextRequest","requestBodyPreview","isTextResponse","FormCheck","inline","checked","label","whiteSpace","responseBody","preview","hexview","detail","Flow","connMgr","connId","_size","headerContentLengthExist","startTime","Date","now","endTime","status","_isTextRequest","_isTextResponse","_requestBody","_hexviewRequestBody","_responseBody","_previewResponseBody","_previewRequestBody","_hexviewResponseBody","curNo","flowRequestMsg","URL","pathname","includes","startsWith","hexviewRequestBody","get","FlowManager","items","_map","filterText","filterTimer","num","max","Map","text","trim","endsWith","reg","RegExp","filter","item","err","oldest","shift","delete","callback","clearTimeout","ConnectionManager","wsReconnIntervals","App","flowMgr","ws","wsUnmountClose","tableBottomRef","wsReconnCount","flows","showList","wsStatus","createRef","initWs","close","document","WebSocket","binaryType","onopen","onerror","evt","console","error","onclose","waitSeconds","info","onmessage","meta","Int8Array","resp","contentStr","parse","parseMessage","add","shouldScroll","current","element","viewWidth","window","innerWidth","documentElement","clientWidth","viewHeight","innerHeight","clientHeight","getBoundingClientRect","top","right","bottom","left","isInViewPort","scrollIntoView","behavior","addRequestBody","addResponse","addResponseBody","clear","placeholder","changeFilterLazy","CHANGE_BREAK_POINT_RULES","rulesBytes","buildMessageMeta","send","Table","striped","bordered","tableLayout","width","f","ref","height","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e33d4824.chunk.js","sourcesContent":["import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\ntype Method = 'ALL' | 'GET' | 'POST' | 'PUT' | 'DELETE' | ''\r\ntype Action = 1 | 2 | 3\r\ninterface IRule {\r\n  method: Method\r\n  url: string\r\n  action: Action\r\n}\r\n\r\ninterface IState {\r\n  show: boolean\r\n  rule: IRule\r\n  haveRules: boolean\r\n}\r\n\r\ninterface IProps {\r\n  onSave: (rules: IRule[]) => void\r\n}\r\n\r\nclass BreakPoint extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      show: false,\r\n\r\n      rule: {\r\n        method: 'ALL',\r\n        url: '',\r\n        action: 1,\r\n      },\r\n\r\n      haveRules: false,\r\n    }\r\n\r\n    this.handleClose = this.handleClose.bind(this)\r\n    this.handleShow = this.handleShow.bind(this)\r\n    this.handleSave = this.handleSave.bind(this)\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({ show: false })\r\n  }\r\n\r\n  handleShow() {\r\n    this.setState({ show: true })\r\n  }\r\n\r\n  handleSave() {\r\n    const { rule } = this.state\r\n    const rules: IRule[] = []\r\n    if (rule.url) {\r\n      rules.push({\r\n        method: rule.method === 'ALL' ? '' : rule.method,\r\n        url: rule.url,\r\n        action: rule.action,\r\n      })\r\n    }\r\n\r\n    this.props.onSave(rules)\r\n    this.handleClose()\r\n\r\n    this.setState({ haveRules: rules.length ? true : false })\r\n  }\r\n\r\n  render() {\r\n    const { rule, haveRules } = this.state\r\n    const variant = haveRules ? 'success' : 'primary'\r\n\r\n    return (\r\n      <div>\r\n        <Button variant={variant} size=\"sm\" onClick={this.handleShow}>BreakPoint</Button>\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Set BreakPoint</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={2}>Method</Form.Label>\r\n              <Col sm={10}>\r\n                <Form.Control as=\"select\" value={rule.method} onChange={e => { this.setState({ rule: { ...rule, method: e.target.value as Method } }) }}>\r\n                  <option>ALL</option>\r\n                  <option>GET</option>\r\n                  <option>POST</option>\r\n                  <option>PUT</option>\r\n                  <option>DELETE</option>\r\n                </Form.Control>\r\n              </Col>\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={2}>URL</Form.Label>\r\n              <Col sm={10}><Form.Control value={rule.url} onChange={e => { this.setState({ rule: { ...rule, url: e.target.value } }) }} /></Col>\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={2}>Action</Form.Label>\r\n              <Col sm={10}>\r\n                <Form.Control as=\"select\" value={rule.action} onChange={e => { this.setState({ rule: { ...rule, action: parseInt(e.target.value) as Action } }) }}>\r\n                  <option value=\"1\">Request</option>\r\n                  <option value=\"2\">Response</option>\r\n                  <option value=\"3\">Both</option>\r\n                </Form.Control>\r\n              </Col>\r\n            </Form.Group>\r\n          </Modal.Body>\r\n\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleSave}>\r\n              Save\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BreakPoint\r\n","import type { IRequest, IResponse } from './flow'\r\n\r\nexport const isTextBody = (payload: IRequest | IResponse) => {\r\n  if (!payload) return false\r\n  if (!payload.header) return false\r\n  if (!payload.header['Content-Type']) return false\r\n\r\n  return /text|javascript|json|x-www-form-urlencoded|xml|form-data/.test(payload.header['Content-Type'].join(''))\r\n}\r\n\r\nexport const getSize = (len: number) => {\r\n  if (!len) return '0'\r\n  if (isNaN(len)) return '0'\r\n  if (len <= 0) return '0'\r\n\r\n  if (len < 1024) return `${len} B`\r\n  if (len < 1024 * 1024) return `${(len / 1024).toFixed(2)} KB`\r\n  return `${(len / (1024 * 1024)).toFixed(2)} MB`\r\n}\r\n\r\nexport const shallowEqual = (objA: any, objB: any) => {\r\n  if (objA === objB) return true\r\n\r\n  const keysA = Object.keys(objA)\r\n  const keysB = Object.keys(objB)\r\n  if (keysA.length !== keysB.length) return false\r\n\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    const key = keysA[i]\r\n    if (objB[key] === undefined || objA[key] !== objB[key]) return false\r\n  }\r\n  return true\r\n}\r\n\r\nexport const arrayBufferToBase64 = (buf: ArrayBuffer) => {\r\n  let binary = ''\r\n  const bytes = new Uint8Array(buf)\r\n  const len = bytes.byteLength\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i])\r\n  }\r\n  return btoa(binary)\r\n}\r\n\r\nexport const bufHexView = (buf: ArrayBuffer) => {\r\n  let str = ''\r\n  const bytes = new Uint8Array(buf)\r\n  const len = bytes.byteLength\r\n\r\n  let viewStr = ''\r\n\r\n  str += '00000000:  '\r\n  for (let i = 0; i < len; i++) {\r\n    str += bytes[i].toString(16).padStart(2, '0') + ' '\r\n\r\n    if (bytes[i] >= 32 && bytes[i] <= 126) {\r\n      viewStr += String.fromCharCode(bytes[i])\r\n    } else {\r\n      viewStr += '.'\r\n    }\r\n\r\n    if ((i + 1) % 16 === 0) {\r\n      str += '   ' + viewStr\r\n      viewStr = ''\r\n      str += `\\n${(i + 1).toString(16).padStart(8, '0')}:  `\r\n    } else if ((i + 1) % 8 === 0) {\r\n      str += '  '\r\n    }\r\n  }\r\n\r\n  // 补充最后一行的空白\r\n  if (viewStr.length > 0) {\r\n    for (let i = viewStr.length; i < 16; i++) {\r\n      str += '  ' + ' '\r\n      if ((i + 1) % 8 === 0) str += '  '\r\n    }\r\n    str += ' ' + viewStr\r\n  }\r\n\r\n  return str\r\n}\r\n\r\n// https://github.com/febobo/web-interview/issues/84\r\nexport function isInViewPort(element: HTMLElement) {\r\n  const viewWidth = window.innerWidth || document.documentElement.clientWidth\r\n  const viewHeight = window.innerHeight || document.documentElement.clientHeight\r\n  const {\r\n    top,\r\n    right,\r\n    bottom,\r\n    left,\r\n  } = element.getBoundingClientRect()\r\n\r\n  return (\r\n    top >= 0 &&\r\n    left >= 0 &&\r\n    right <= viewWidth &&\r\n    bottom <= viewHeight\r\n  )\r\n}\r\n","import type { IConnection } from './connection'\r\nimport type { Flow, IFlowRequest, IRequest, IResponse } from './flow'\r\n\r\nexport enum MessageType {\r\n  CONN = 0,\r\n  CONN_CLOSE = 5,\r\n  REQUEST = 1,\r\n  REQUEST_BODY = 2,\r\n  RESPONSE = 3,\r\n  RESPONSE_BODY = 4,\r\n}\r\n\r\nconst allMessageBytes = [\r\n  MessageType.CONN,\r\n  MessageType.CONN_CLOSE,\r\n  MessageType.REQUEST,\r\n  MessageType.REQUEST_BODY,\r\n  MessageType.RESPONSE,\r\n  MessageType.RESPONSE_BODY,\r\n]\r\n\r\nexport interface IMessage {\r\n  type: MessageType\r\n  id: string\r\n  waitIntercept: boolean\r\n  content?: ArrayBuffer | IFlowRequest | IResponse | IConnection\r\n}\r\n\r\n// type: 0/1/2/3/4\r\n// messageFlow\r\n// version 1 byte + type 1 byte + id 36 byte + waitIntercept 1 byte + content left bytes\r\nexport const parseMessage = (data: ArrayBuffer): IMessage | null => {\r\n  if (data.byteLength < 39) return null\r\n  const meta = new Int8Array(data.slice(0, 39))\r\n  const version = meta[0]\r\n  if (version !== 2) return null\r\n  const type = meta[1] as MessageType\r\n  if (!allMessageBytes.includes(type)) return null\r\n  const id = new TextDecoder().decode(data.slice(2, 38))\r\n  const waitIntercept = meta[38] === 1\r\n\r\n  const resp: IMessage = {\r\n    type,\r\n    id,\r\n    waitIntercept,\r\n  }\r\n  if (data.byteLength === 39) return resp\r\n  if (type === MessageType.REQUEST_BODY || type === MessageType.RESPONSE_BODY) {\r\n    resp.content = data.slice(39)\r\n    return resp\r\n  }\r\n\r\n  const contentStr = new TextDecoder().decode(data.slice(39))\r\n  let content: any\r\n  try {\r\n    content = JSON.parse(contentStr)\r\n  } catch (err) {\r\n    return null\r\n  }\r\n\r\n  resp.content = content\r\n  return resp\r\n}\r\n\r\nexport enum SendMessageType {\r\n  CHANGE_REQUEST = 11,\r\n  CHANGE_RESPONSE = 12,\r\n  DROP_REQUEST = 13,\r\n  DROP_RESPONSE = 14,\r\n  CHANGE_BREAK_POINT_RULES = 21,\r\n}\r\n\r\n// type: 11/12/13/14\r\n// messageEdit\r\n// version 1 byte + type 1 byte + id 36 byte + header len 4 byte + header content bytes + body len 4 byte + [body content bytes]\r\nexport const buildMessageEdit = (messageType: SendMessageType, flow: Flow) => {\r\n  if (messageType === SendMessageType.DROP_REQUEST || messageType === SendMessageType.DROP_RESPONSE) {\r\n    const view = new Uint8Array(38)\r\n    view[0] = 1\r\n    view[1] = messageType\r\n    view.set(new TextEncoder().encode(flow.id), 2)\r\n    return view\r\n  }\r\n\r\n  let header: Omit<IRequest, 'body'> | Omit<IResponse, 'body'>\r\n  let body: ArrayBuffer | Uint8Array | undefined\r\n\r\n  if (messageType === SendMessageType.CHANGE_REQUEST) {\r\n    ({ body, ...header } = flow.request)\r\n  } else if (messageType === SendMessageType.CHANGE_RESPONSE) {\r\n    ({ body, ...header } = flow.response as IResponse)\r\n  } else {\r\n    throw new Error('invalid message type')\r\n  }\r\n\r\n  if (body instanceof ArrayBuffer) body = new Uint8Array(body)\r\n  const bodyLen = (body && body.byteLength) ? body.byteLength : 0\r\n\r\n  if ('Content-Encoding' in header.header) delete header.header['Content-Encoding']\r\n  if ('Transfer-Encoding' in header.header) delete header.header['Transfer-Encoding']\r\n  header.header['Content-Length'] = [String(bodyLen)]\r\n\r\n  const headerBytes = new TextEncoder().encode(JSON.stringify(header))\r\n  const len = 2 + 36 + 4 + headerBytes.byteLength + 4 + bodyLen\r\n  const data = new ArrayBuffer(len)\r\n  const view = new Uint8Array(data)\r\n  view[0] = 1\r\n  view[1] = messageType\r\n  view.set(new TextEncoder().encode(flow.id), 2)\r\n  view.set(headerBytes, 2 + 36 + 4)\r\n  if (bodyLen) view.set(body as Uint8Array, 2 + 36 + 4 + headerBytes.byteLength + 4)\r\n\r\n  const view2 = new DataView(data)\r\n  view2.setUint32(2 + 36, headerBytes.byteLength)\r\n  view2.setUint32(2 + 36 + 4 + headerBytes.byteLength, bodyLen)\r\n\r\n  return view\r\n}\r\n\r\n// type: 21\r\n// messageMeta\r\n// version 1 byte + type 1 byte + content left bytes\r\nexport const buildMessageMeta = (messageType: SendMessageType, rules: any) => {\r\n  if (messageType !== SendMessageType.CHANGE_BREAK_POINT_RULES) {\r\n    throw new Error('invalid message type')\r\n  }\r\n\r\n  const rulesBytes = new TextEncoder().encode(JSON.stringify(rules))\r\n  const view = new Uint8Array(2 + rulesBytes.byteLength)\r\n  view[0] = 1\r\n  view[1] = messageType\r\n  view.set(rulesBytes, 2)\r\n\r\n  return view\r\n}\r\n","import React from 'react'\r\nimport { shallowEqual } from '../lib/utils'\r\nimport type { IFlowPreview } from '../lib/flow'\r\n\r\ninterface IProps {\r\n  flow: IFlowPreview\r\n  isSelected: boolean\r\n  onShowDetail: () => void\r\n}\r\n\r\nclass FlowPreview extends React.Component<IProps> {\r\n  shouldComponentUpdate(nextProps: IProps) {\r\n    if (nextProps.isSelected === this.props.isSelected && shallowEqual(nextProps.flow, this.props.flow)) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  render() {\r\n    const fp = this.props.flow\r\n\r\n    const classNames = []\r\n    if (this.props.isSelected) classNames.push('tr-selected')\r\n    if (fp.waitIntercept) classNames.push('tr-wait-intercept')\r\n\r\n    return (\r\n      <tr className={classNames.length ? classNames.join(' ') : undefined}\r\n        onClick={() => {\r\n          this.props.onShowDetail()\r\n        }}\r\n      >\r\n        <td>{fp.no}</td>\r\n        <td>{fp.method}</td>\r\n        <td>{fp.host}</td>\r\n        <td>{fp.path}</td>\r\n        <td>{fp.contentType}</td>\r\n        <td>{fp.statusCode}</td>\r\n        <td>{fp.size}</td>\r\n        <td>{fp.costTime}</td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FlowPreview\r\n","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { SendMessageType, buildMessageEdit } from '../lib/message'\r\nimport { isTextBody } from '../lib/utils'\r\nimport type { Flow, Header, IRequest, IResponse } from '../lib/flow'\r\n\r\nconst stringifyRequest = (request: IRequest) => {\r\n  const firstLine = `${request.method} ${request.url}`\r\n  const headerLines = Object.keys(request.header).map(key => {\r\n    const valstr = request.header[key].join(' \\t ') // for parse convenience\r\n    return `${key}: ${valstr}`\r\n  }).join('\\n')\r\n\r\n  let bodyLines = ''\r\n  if (request.body && isTextBody(request)) bodyLines = new TextDecoder().decode(request.body)\r\n\r\n  return `${firstLine}\\n\\n${headerLines}\\n\\n${bodyLines}`\r\n}\r\n\r\nconst parseRequest = (content: string): IRequest | undefined => {\r\n  const firstIndex = content.indexOf('\\n\\n')\r\n  if (firstIndex <= 0) return\r\n\r\n  const firstLine = content.slice(0, firstIndex)\r\n  const [method, url] = firstLine.split(' ')\r\n  if (!method || !url) return\r\n\r\n  const secondIndex = content.indexOf('\\n\\n', firstIndex + 2)\r\n  if (secondIndex <= 0) return\r\n  const headerLines = content.slice(firstIndex + 2, secondIndex)\r\n  const header: Header = {}\r\n  for (const line of headerLines.split('\\n')) {\r\n    const [key, vals] = line.split(': ')\r\n    if (!key || !vals) return\r\n    header[key] = vals.split(' \\t ')\r\n  }\r\n\r\n  const bodyLines = content.slice(secondIndex + 2)\r\n  let body: ArrayBuffer | undefined\r\n  if (bodyLines) body = new TextEncoder().encode(bodyLines)\r\n\r\n  return {\r\n    method,\r\n    url,\r\n    proto: '',\r\n    header,\r\n    body,\r\n  }\r\n}\r\n\r\nconst stringifyResponse = (response: IResponse) => {\r\n  const firstLine = `${response.statusCode}`\r\n  const headerLines = Object.keys(response.header).map(key => {\r\n    const valstr = response.header[key].join(' \\t ') // for parse convenience\r\n    return `${key}: ${valstr}`\r\n  }).join('\\n')\r\n\r\n  let bodyLines = ''\r\n  if (response.body && isTextBody(response)) bodyLines = new TextDecoder().decode(response.body)\r\n\r\n  return `${firstLine}\\n\\n${headerLines}\\n\\n${bodyLines}`\r\n}\r\n\r\nconst parseResponse = (content: string): IResponse | undefined => {\r\n  const firstIndex = content.indexOf('\\n\\n')\r\n  if (firstIndex <= 0) return\r\n\r\n  const firstLine = content.slice(0, firstIndex)\r\n  const statusCode = parseInt(firstLine)\r\n  if (isNaN(statusCode)) return\r\n\r\n  const secondIndex = content.indexOf('\\n\\n', firstIndex + 2)\r\n  if (secondIndex <= 0) return\r\n  const headerLines = content.slice(firstIndex + 2, secondIndex)\r\n  const header: Header = {}\r\n  for (const line of headerLines.split('\\n')) {\r\n    const [key, vals] = line.split(': ')\r\n    if (!key || !vals) return\r\n    header[key] = vals.split(' \\t ')\r\n  }\r\n\r\n  const bodyLines = content.slice(secondIndex + 2)\r\n  let body: ArrayBuffer | undefined\r\n  if (bodyLines) body = new TextEncoder().encode(bodyLines)\r\n\r\n  return {\r\n    statusCode,\r\n    header,\r\n    body,\r\n  }\r\n}\r\n\r\n\r\ninterface IProps {\r\n  flow: Flow\r\n  onChangeRequest: (request: IRequest) => void\r\n  onChangeResponse: (response: IResponse) => void\r\n  onMessage: (msg: ArrayBufferLike) => void\r\n}\r\n\r\ninterface IState {\r\n  show: boolean\r\n  alertMsg: string\r\n  content: string\r\n}\r\n\r\nclass EditFlow extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      show: false,\r\n      alertMsg: '',\r\n      content: '',\r\n    }\r\n\r\n    this.handleClose = this.handleClose.bind(this)\r\n    this.handleShow = this.handleShow.bind(this)\r\n    this.handleSave = this.handleSave.bind(this)\r\n  }\r\n\r\n  showAlert(msg: string) {\r\n    this.setState({ alertMsg: msg })\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({ show: false })\r\n  }\r\n\r\n  handleShow() {\r\n    const { flow } = this.props\r\n    const when = flow.response ? 'response' : 'request'\r\n\r\n    let content = ''\r\n    if (when === 'request') {\r\n      content = stringifyRequest(flow.request)\r\n    } else {\r\n      content = stringifyResponse(flow.response as IResponse)\r\n    }\r\n\r\n    this.setState({ show: true, alertMsg: '', content })\r\n  }\r\n\r\n  handleSave() {\r\n    const { flow } = this.props\r\n    const when = flow.response ? 'response' : 'request'\r\n\r\n    const { content } = this.state\r\n\r\n    if (when === 'request') {\r\n      const request = parseRequest(content)\r\n      if (!request) {\r\n        this.showAlert('parse error')\r\n        return\r\n      }\r\n\r\n      this.props.onChangeRequest(request)\r\n      this.handleClose()\r\n    } else {\r\n      const response = parseResponse(content)\r\n      if (!response) {\r\n        this.showAlert('parse error')\r\n        return\r\n      }\r\n\r\n      this.props.onChangeResponse(response)\r\n      this.handleClose()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { flow } = this.props\r\n    if (!flow.waitIntercept) return null\r\n\r\n    const { alertMsg } = this.state\r\n\r\n    const when = flow.response ? 'response' : 'request'\r\n\r\n    return (\r\n      <div className=\"flow-wait-area\">\r\n\r\n        <Button size=\"sm\" onClick={this.handleShow}>Edit</Button>\r\n\r\n        <Button size=\"sm\" onClick={() => {\r\n          const msgType = when === 'response' ? SendMessageType.CHANGE_RESPONSE : SendMessageType.CHANGE_REQUEST\r\n          const msg = buildMessageEdit(msgType, flow)\r\n          this.props.onMessage(msg)\r\n        }}>Continue</Button>\r\n\r\n        <Button size=\"sm\" onClick={() => {\r\n          const msgType = when === 'response' ? SendMessageType.DROP_RESPONSE : SendMessageType.DROP_REQUEST\r\n          const msg = buildMessageEdit(msgType, flow)\r\n          this.props.onMessage(msg)\r\n        }}>Drop</Button>\r\n\r\n\r\n        <Modal size=\"lg\" show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Edit {when === 'request' ? 'Request' : 'Response'}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Form.Group>\r\n              <Form.Control as=\"textarea\" rows={10} value={this.state.content} onChange={e => { this.setState({ content: e.target.value }) }} />\r\n            </Form.Group>\r\n            {\r\n              !alertMsg ? null : <Alert variant=\"danger\">{alertMsg}</Alert>\r\n            }\r\n          </Modal.Body>\r\n\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleSave}>\r\n              Save\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditFlow\r\n","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport FormCheck from 'react-bootstrap/FormCheck'\r\nimport fetchToCurl from 'fetch-to-curl'\r\nimport copy from 'copy-to-clipboard'\r\nimport JSONPretty from 'react-json-pretty'\r\nimport { isTextBody } from '../lib/utils'\r\nimport type { Flow, IResponse } from '../lib/flow'\r\nimport EditFlow from './EditFlow'\r\n\r\ninterface Iprops {\r\n  flow: Flow | null\r\n  onClose: () => void\r\n  onReRenderFlows: () => void\r\n  onMessage: (msg: ArrayBufferLike) => void\r\n}\r\n\r\ninterface IState {\r\n  flowTab: 'Headers' | 'Preview' | 'Response' | 'Hexview' | 'Detail'\r\n  copied: boolean\r\n  requestBodyViewTab: 'Raw' | 'Preview'\r\n  responseBodyLineBreak: boolean\r\n}\r\n\r\nclass ViewFlow extends React.Component<Iprops, IState> {\r\n  constructor(props: Iprops) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      flowTab: 'Detail',\r\n      copied: false,\r\n      requestBodyViewTab: 'Raw',\r\n      responseBodyLineBreak: false,\r\n    }\r\n  }\r\n\r\n  preview() {\r\n    const { flow } = this.props\r\n    if (!flow) return null\r\n    const response = flow.response\r\n    if (!response) return null\r\n\r\n    if (!(response.body && response.body.byteLength)) {\r\n      return <div style={{ color: 'gray' }}>No response</div>\r\n    }\r\n\r\n    const pv = flow.previewResponseBody()\r\n    if (!pv) return <div style={{ color: 'gray' }}>Not support preview</div>\r\n\r\n    if (pv.type === 'image') {\r\n      return <img src={`data:image/png;base64,${pv.data}`} />\r\n    }\r\n    else if (pv.type === 'json') {\r\n      return <div><JSONPretty data={pv.data} keyStyle={'color: rgb(130,40,144);'} stringStyle={'color: rgb(153,68,60);'} valueStyle={'color: rgb(25,1,199);'} booleanStyle={'color: rgb(94,105,192);'} /></div>\r\n    }\r\n\r\n    return <div style={{ color: 'gray' }}>Not support preview</div>\r\n  }\r\n\r\n  requestBodyPreview() {\r\n    const { flow } = this.props\r\n    if (!flow) return null\r\n\r\n    const pv = flow.previewRequestBody()\r\n    if (!pv) return <div style={{ color: 'gray' }}>Not support preview</div>\r\n\r\n    if (pv.type === 'json') {\r\n      return <div><JSONPretty data={pv.data} keyStyle={'color: rgb(130,40,144);'} stringStyle={'color: rgb(153,68,60);'} valueStyle={'color: rgb(25,1,199);'} booleanStyle={'color: rgb(94,105,192);'} /></div>\r\n    }\r\n    else if (pv.type === 'binary') {\r\n      return <div><pre>{pv.data}</pre></div>\r\n    }\r\n\r\n    return <div style={{ color: 'gray' }}>Not support preview</div>\r\n  }\r\n\r\n  hexview() {\r\n    const { flow } = this.props\r\n    if (!flow) return null\r\n    const response = flow.response\r\n    if (!response) return null\r\n\r\n    if (!(response.body && response.body.byteLength)) {\r\n      return <div style={{ color: 'gray' }}>No response</div>\r\n    }\r\n\r\n    return <pre>{flow.hexviewResponseBody()}</pre>\r\n  }\r\n\r\n  detail() {\r\n    const { flow } = this.props\r\n    if (!flow) return null\r\n\r\n    const conn = flow.getConn()\r\n    if (!conn) return null\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"header-block\">\r\n          <p>Server Connection</p>\r\n          <div className=\"header-block-content\">\r\n            <p>Address: {conn.serverConn.address}</p>\r\n            <p>Resolved Address: {conn.serverConn.peername}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"header-block\">\r\n          <p>Client Connection</p>\r\n          <div className=\"header-block-content\">\r\n            <p>Address: {conn.clientConn.address}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.flow) return null\r\n\r\n    const flow = this.props.flow\r\n    const flowTab = this.state.flowTab\r\n\r\n    const request = flow.request\r\n    const response: IResponse = (flow.response || {}) as any\r\n\r\n    // Query String Parameters\r\n    const searchItems: Array<{ key: string; value: string }> = []\r\n    if (flow.url && flow.url.search) {\r\n      flow.url.searchParams.forEach((value, key) => {\r\n        searchItems.push({ key, value })\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div className=\"flow-detail\">\r\n        <div className=\"header-tabs\">\r\n          <span onClick={() => { this.props.onClose() }}>x</span>\r\n          <span className={flowTab === 'Detail' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Detail' }) }}>Detail</span>\r\n          <span className={flowTab === 'Headers' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Headers' }) }}>Headers</span>\r\n          <span className={flowTab === 'Preview' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Preview' }) }}>Preview</span>\r\n          <span className={flowTab === 'Response' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Response' }) }}>Response</span>\r\n          <span className={flowTab === 'Hexview' ? 'selected' : undefined} onClick={() => { this.setState({ flowTab: 'Hexview' }) }}>Hexview</span>\r\n\r\n          <EditFlow\r\n            flow={flow}\r\n            onChangeRequest={request => {\r\n              flow.request.method = request.method\r\n              flow.request.url = request.url\r\n              flow.request.header = request.header\r\n              if (isTextBody(flow.request)) flow.request.body = request.body\r\n              this.props.onReRenderFlows()\r\n            }}\r\n            onChangeResponse={response => {\r\n              if (!flow.response) flow.response = {} as IResponse\r\n\r\n              flow.response.statusCode = response.statusCode\r\n              flow.response.header = response.header\r\n              if (isTextBody(flow.response)) flow.response.body = response.body\r\n              this.props.onReRenderFlows()\r\n            }}\r\n            onMessage={msg => {\r\n              this.props.onMessage(msg)\r\n              flow.waitIntercept = false\r\n              this.props.onReRenderFlows()\r\n            }}\r\n          />\r\n\r\n        </div>\r\n\r\n        <div style={{ padding: '20px' }}>\r\n          {\r\n            !(flowTab === 'Headers') ? null :\r\n              <div>\r\n                <p><Button size=\"sm\" variant={this.state.copied ? 'success' : 'primary'} disabled={this.state.copied} onClick={() => {\r\n                  const curl = fetchToCurl({\r\n                    url: flow.request.url,\r\n                    method: flow.request.method,\r\n                    headers: Object.keys(flow.request.header).reduce((obj: any, key: string) => {\r\n                      obj[key] = flow.request.header[key][0]\r\n                      return obj\r\n                    }, {}),\r\n                    body: flow.requestBody(),\r\n                  })\r\n                  copy(curl)\r\n\r\n                  this.setState({ copied: true }, () => {\r\n                    setTimeout(() => {\r\n                      this.setState({ copied: false })\r\n                    }, 1000)\r\n                  })\r\n\r\n                }}>{this.state.copied ? 'Copied' : 'Copy as cURL'}</Button></p>\r\n\r\n                <div className=\"header-block\">\r\n                  <p>General</p>\r\n                  <div className=\"header-block-content\">\r\n                    <p>Request URL: {request.url}</p>\r\n                    <p>Request Method: {request.method}</p>\r\n                    <p>Status Code: {`${response.statusCode || '(pending)'}`}</p>\r\n                  </div>\r\n                </div>\r\n\r\n                {\r\n                  !(response.header) ? null :\r\n                    <div className=\"header-block\">\r\n                      <p>Response Headers</p>\r\n                      <div className=\"header-block-content\">\r\n                        {\r\n                          Object.keys(response.header).map(key => {\r\n                            return (\r\n                              <p key={key}>{key}: {response.header[key].join(' ')}</p>\r\n                            )\r\n                          })\r\n                        }\r\n                      </div>\r\n                    </div>\r\n                }\r\n\r\n                <div className=\"header-block\">\r\n                  <p>Request Headers</p>\r\n                  <div className=\"header-block-content\">\r\n                    {\r\n                      !(request.header) ? null :\r\n                        Object.keys(request.header).map(key => {\r\n                          return (\r\n                            <p key={key}>{key}: {request.header[key].join(' ')}</p>\r\n                          )\r\n                        })\r\n                    }\r\n                  </div>\r\n                </div>\r\n\r\n                {\r\n                  !(searchItems.length) ? null :\r\n                    <div className=\"header-block\">\r\n                      <p>Query String Parameters</p>\r\n                      <div className=\"header-block-content\">\r\n                        {\r\n                          searchItems.map(({ key, value }) => {\r\n                            return (\r\n                              <p key={key}>{key}: {value}</p>\r\n                            )\r\n                          })\r\n                        }\r\n                      </div>\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                  !(request.body && request.body.byteLength) ? null :\r\n                    <div className=\"header-block\">\r\n                      <p>Request Body</p>\r\n                      <div className=\"header-block-content\">\r\n                        <div>\r\n                          <div className=\"request-body-detail\" style={{ marginBottom: '15px' }}>\r\n                            <span className={this.state.requestBodyViewTab === 'Raw' ? 'selected' : undefined} onClick={() => { this.setState({ requestBodyViewTab: 'Raw' }) }}>Raw</span>\r\n                            <span className={this.state.requestBodyViewTab === 'Preview' ? 'selected' : undefined} onClick={() => { this.setState({ requestBodyViewTab: 'Preview' }) }}>Preview</span>\r\n                          </div>\r\n\r\n                          {\r\n                            !(this.state.requestBodyViewTab === 'Raw') ? null :\r\n                              <div>\r\n                                {\r\n                                  !(flow.isTextRequest()) ? <span style={{ color: 'gray' }}>Not text Request</span> : flow.requestBody()\r\n                                }\r\n                              </div>\r\n                          }\r\n\r\n                          {\r\n                            !(this.state.requestBodyViewTab === 'Preview') ? null :\r\n                              <div>{this.requestBodyPreview()}</div>\r\n                          }\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                }\r\n\r\n              </div>\r\n          }\r\n\r\n          {\r\n            !(flowTab === 'Response') ? null :\r\n              !(response.body && response.body.byteLength) ? <div style={{ color: 'gray' }}>No response</div> :\r\n                !(flow.isTextResponse()) ? <div style={{ color: 'gray' }}>Not text response</div> :\r\n                  <div>\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                      <FormCheck\r\n                        inline\r\n                        type=\"checkbox\"\r\n                        checked={this.state.responseBodyLineBreak}\r\n                        onChange={e => {\r\n                          this.setState({ responseBodyLineBreak: e.target.checked })\r\n                        }}\r\n                        label=\"自动换行\"></FormCheck>\r\n                    </div>\r\n                    <div style={{ whiteSpace: this.state.responseBodyLineBreak ? 'pre-wrap' : 'pre' }}>\r\n                      {flow.responseBody()}\r\n                    </div>\r\n                  </div>\r\n          }\r\n\r\n          {\r\n            !(flowTab === 'Preview') ? null :\r\n              <div>{this.preview()}</div>\r\n          }\r\n\r\n          {\r\n            !(flowTab === 'Hexview') ? null :\r\n              <div>{this.hexview()}</div>\r\n          }\r\n\r\n          {\r\n            !(flowTab === 'Detail') ? null :\r\n              <div>{this.detail()}</div>\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ViewFlow\r\n","import type { ConnectionManager, IConnection } from './connection'\r\nimport { IMessage, MessageType } from './message'\r\nimport { arrayBufferToBase64, bufHexView, getSize, isTextBody } from './utils'\r\n\r\nexport type Header = Record<string, string[]>\r\n\r\nexport interface IRequest {\r\n  method: string\r\n  url: string\r\n  proto: string\r\n  header: Header\r\n  body?: ArrayBuffer\r\n}\r\n\r\nexport interface IFlowRequest {\r\n  connId: string\r\n  request: IRequest\r\n}\r\n\r\nexport interface IResponse {\r\n  statusCode: number\r\n  header: Header\r\n  body?: ArrayBuffer\r\n}\r\n\r\nexport interface IPreviewBody {\r\n  type: 'image' | 'json' | 'binary'\r\n  data: string | null\r\n}\r\n\r\nexport interface IFlowPreview {\r\n  no: number\r\n  id: string\r\n  waitIntercept: boolean\r\n  host: string\r\n  path: string\r\n  method: string\r\n  statusCode: string\r\n  size: string\r\n  costTime: string\r\n  contentType: string\r\n}\r\n\r\nexport class Flow {\r\n  public no: number\r\n  public id: string\r\n  public connId: string\r\n  public waitIntercept: boolean\r\n  public request: IRequest\r\n  public response: IResponse | null = null\r\n\r\n  public url: URL\r\n  private path: string\r\n  private _size = 0\r\n  private size = '0'\r\n  private headerContentLengthExist = false\r\n  private contentType = ''\r\n\r\n  private startTime = Date.now()\r\n  private endTime = 0\r\n  private costTime = '(pending)'\r\n\r\n  public static curNo = 0\r\n\r\n  private status: MessageType = MessageType.REQUEST\r\n\r\n  private _isTextRequest: boolean | null\r\n  private _isTextResponse: boolean | null\r\n  private _requestBody: string | null\r\n  private _hexviewRequestBody: string | null = null\r\n  private _responseBody: string | null\r\n\r\n  private _previewResponseBody: IPreviewBody | null = null\r\n  private _previewRequestBody: IPreviewBody | null = null\r\n  private _hexviewResponseBody: string | null = null\r\n\r\n  private connMgr: ConnectionManager;\r\n  private conn: IConnection | undefined;\r\n\r\n  constructor(msg: IMessage, connMgr: ConnectionManager) {\r\n    this.no = ++Flow.curNo\r\n    this.id = msg.id\r\n    this.waitIntercept = msg.waitIntercept\r\n\r\n    const flowRequestMsg = msg.content as IFlowRequest\r\n    this.connId = flowRequestMsg.connId\r\n    this.request = flowRequestMsg.request\r\n\r\n    this.url = new URL(this.request.url)\r\n    this.path = this.url.pathname + this.url.search\r\n\r\n    this._isTextRequest = null\r\n    this._isTextResponse = null\r\n    this._requestBody = null\r\n    this._responseBody = null\r\n\r\n    this.connMgr = connMgr\r\n  }\r\n\r\n  public addRequestBody(msg: IMessage): Flow {\r\n    this.status = MessageType.REQUEST_BODY\r\n    this.waitIntercept = msg.waitIntercept\r\n    this.request.body = msg.content as ArrayBuffer\r\n    return this\r\n  }\r\n\r\n  public addResponse(msg: IMessage): Flow {\r\n    this.status = MessageType.RESPONSE\r\n    this.waitIntercept = msg.waitIntercept\r\n    this.response = msg.content as IResponse\r\n\r\n    if (this.response && this.response.header) {\r\n      if (this.response.header['Content-Type'] != null) {\r\n        this.contentType = this.response.header['Content-Type'][0].split(';')[0]\r\n        if (this.contentType.includes('javascript')) this.contentType = 'javascript'\r\n      }\r\n      if (this.response.header['Content-Length'] != null) {\r\n        this.headerContentLengthExist = true\r\n        this._size = parseInt(this.response.header['Content-Length'][0])\r\n        this.size = getSize(this._size)\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  public addResponseBody(msg: IMessage): Flow {\r\n    this.status = MessageType.RESPONSE_BODY\r\n    this.waitIntercept = msg.waitIntercept\r\n    if (this.response) this.response.body = msg.content as ArrayBuffer\r\n    this.endTime = Date.now()\r\n    this.costTime = String(this.endTime - this.startTime) + ' ms'\r\n\r\n    if (!this.headerContentLengthExist && this.response && this.response.body) {\r\n      this._size = this.response.body.byteLength\r\n      this.size = getSize(this._size)\r\n    }\r\n    return this\r\n  }\r\n\r\n  public preview(): IFlowPreview {\r\n    return {\r\n      no: this.no,\r\n      id: this.id,\r\n      waitIntercept: this.waitIntercept,\r\n      host: this.url.host,\r\n      path: this.path,\r\n      method: this.request.method,\r\n      statusCode: this.response ? String(this.response.statusCode) : '(pending)',\r\n      size: this.size,\r\n      costTime: this.costTime,\r\n      contentType: this.contentType,\r\n    }\r\n  }\r\n\r\n  public isTextRequest(): boolean {\r\n    if (this._isTextRequest !== null) return this._isTextRequest\r\n    this._isTextRequest = isTextBody(this.request)\r\n    return this._isTextRequest\r\n  }\r\n\r\n  public requestBody(): string {\r\n    if (this._requestBody !== null) return this._requestBody\r\n    if (!this.isTextRequest()) {\r\n      this._requestBody = ''\r\n      return this._requestBody\r\n    }\r\n    if (this.status < MessageType.REQUEST_BODY) return ''\r\n    this._requestBody = new TextDecoder().decode(this.request.body)\r\n    return this._requestBody\r\n  }\r\n\r\n  public hexviewRequestBody(): string | null {\r\n    if (this._hexviewRequestBody !== null) return this._hexviewRequestBody\r\n    if (this.status < MessageType.REQUEST_BODY) return null\r\n    if (!(this.request?.body?.byteLength)) return null\r\n\r\n    this._hexviewRequestBody = bufHexView(this.request.body)\r\n    return this._hexviewRequestBody\r\n  }\r\n\r\n  public isTextResponse(): boolean | null {\r\n    if (this.status < MessageType.RESPONSE) return null\r\n    if (this._isTextResponse !== null) return this._isTextResponse\r\n    this._isTextResponse = isTextBody(this.response as IResponse)\r\n    return this._isTextResponse\r\n  }\r\n\r\n  public responseBody(): string {\r\n    if (this._responseBody !== null) return this._responseBody\r\n    if (this.status < MessageType.RESPONSE) return ''\r\n    if (!this.isTextResponse()) {\r\n      this._responseBody = ''\r\n      return this._responseBody\r\n    }\r\n    if (this.status < MessageType.RESPONSE_BODY) return ''\r\n    this._responseBody = new TextDecoder().decode(this.response?.body)\r\n    return this._responseBody\r\n  }\r\n\r\n  public previewResponseBody(): IPreviewBody | null {\r\n    if (this._previewResponseBody) return this._previewResponseBody\r\n\r\n    if (this.status < MessageType.RESPONSE_BODY) return null\r\n    if (!(this.response?.body?.byteLength)) return null\r\n\r\n    let contentType: string | undefined\r\n    if (this.response.header['Content-Type']) contentType = this.response.header['Content-Type'][0]\r\n    if (!contentType) return null\r\n\r\n    if (contentType.startsWith('image/')) {\r\n      this._previewResponseBody = {\r\n        type: 'image',\r\n        data: arrayBufferToBase64(this.response.body),\r\n      }\r\n    }\r\n    else if (contentType.includes('application/json')) {\r\n      this._previewResponseBody = {\r\n        type: 'json',\r\n        data: this.responseBody(),\r\n      }\r\n    }\r\n\r\n    return this._previewResponseBody\r\n  }\r\n\r\n  public previewRequestBody(): IPreviewBody | null {\r\n    if (this._previewRequestBody) return this._previewRequestBody\r\n\r\n    if (this.status < MessageType.REQUEST_BODY) return null\r\n    if (!(this.request.body?.byteLength)) return null\r\n\r\n    if (!this.isTextRequest()) {\r\n      this._previewRequestBody = {\r\n        type: 'binary',\r\n        data: this.hexviewRequestBody(),\r\n      }\r\n    } else if (/json/.test(this.request.header['Content-Type'].join(''))) {\r\n      this._previewRequestBody = {\r\n        type: 'json',\r\n        data: this.requestBody(),\r\n      }\r\n    }\r\n\r\n    return this._previewRequestBody\r\n  }\r\n\r\n  public hexviewResponseBody(): string | null {\r\n    if (this._hexviewResponseBody !== null) return this._hexviewResponseBody\r\n\r\n    if (this.status < MessageType.RESPONSE_BODY) return null\r\n    if (!(this.response?.body?.byteLength)) return null\r\n\r\n    this._hexviewResponseBody = bufHexView(this.response.body)\r\n    return this._hexviewResponseBody\r\n  }\r\n\r\n  public getConn(): IConnection | undefined {\r\n    if (this.conn) return this.conn\r\n    this.conn = this.connMgr.get(this.connId)\r\n    return this.conn\r\n  }\r\n}\r\n\r\nexport class FlowManager {\r\n  private items: Flow[]\r\n  private _map: Map<string, Flow>\r\n  private filterText: string\r\n  private filterTimer: number | null\r\n  private num: number\r\n  private max: number\r\n\r\n  constructor() {\r\n    this.items = []\r\n    this._map = new Map()\r\n    this.filterText = ''\r\n    this.filterTimer = null\r\n    this.num = 0\r\n\r\n    this.max = 1000\r\n  }\r\n\r\n  showList() {\r\n    let text = this.filterText\r\n    if (text) text = text.trim()\r\n    if (!text) return this.items\r\n\r\n    // regexp\r\n    if (text.startsWith('/') && text.endsWith('/')) {\r\n      text = text.slice(1, text.length - 1).trim()\r\n      if (!text) return this.items\r\n      try {\r\n        const reg = new RegExp(text)\r\n        return this.items.filter(item => {\r\n          return reg.test(item.request.url)\r\n        })\r\n      } catch (err) {\r\n        return this.items\r\n      }\r\n    }\r\n\r\n    return this.items.filter(item => {\r\n      return item.request.url.includes(text)\r\n    })\r\n  }\r\n\r\n  add(item: Flow) {\r\n    item.no = ++this.num\r\n    this.items.push(item)\r\n    this._map.set(item.id, item)\r\n\r\n    if (this.items.length > this.max) {\r\n      const oldest = this.items.shift()\r\n      if (oldest) this._map.delete(oldest.id)\r\n    }\r\n  }\r\n\r\n  get(id: string) {\r\n    return this._map.get(id)\r\n  }\r\n\r\n  changeFilter(text: string) {\r\n    this.filterText = text\r\n  }\r\n\r\n  changeFilterLazy(text: string, callback: () => void) {\r\n    if (this.filterTimer) {\r\n      clearTimeout(this.filterTimer)\r\n      this.filterTimer = null\r\n    }\r\n\r\n    this.filterTimer = setTimeout(() => {\r\n      this.filterText = text\r\n      callback()\r\n    }, 300) as any\r\n  }\r\n\r\n  clear() {\r\n    this.items = []\r\n    this._map = new Map()\r\n  }\r\n}\r\n","export interface IConnection {\r\n  clientConn: {\r\n    id: string\r\n    tls: boolean\r\n    address: string\r\n  }\r\n  serverConn: {\r\n    id: string\r\n    address: string\r\n    peername: string\r\n  }\r\n}\r\n\r\nexport class ConnectionManager {\r\n  private _map: Map<string, IConnection>\r\n\r\n  constructor() {\r\n    this._map = new Map()\r\n  }\r\n\r\n  get(id: string) {\r\n    return this._map.get(id)\r\n  }\r\n\r\n  add(id: string, conn: IConnection) {\r\n    this._map.set(id, conn)\r\n  }\r\n\r\n  delete(id: string) {\r\n    this._map.delete(id)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './App.css'\r\n\r\nimport BreakPoint from './components/BreakPoint'\r\nimport FlowPreview from './components/FlowPreview'\r\nimport ViewFlow from './components/ViewFlow'\r\n\r\nimport { Flow, FlowManager } from './lib/flow'\r\nimport { parseMessage, SendMessageType, buildMessageMeta, MessageType } from './lib/message'\r\nimport { isInViewPort } from './lib/utils'\r\nimport { ConnectionManager, IConnection } from './lib/connection'\r\n\r\ninterface IState {\r\n  flows: Flow[]\r\n  flow: Flow | null\r\n  wsStatus: 'open' | 'close' | 'connecting'\r\n}\r\n\r\nconst wsReconnIntervals = [1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32]\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\ninterface IProps {}\r\n\r\nclass App extends React.Component<IProps, IState> {\r\n  private connMgr: ConnectionManager\r\n  private flowMgr: FlowManager\r\n  private ws: WebSocket | null\r\n  private wsUnmountClose: boolean\r\n  private tableBottomRef: React.RefObject<HTMLDivElement>\r\n\r\n  private wsReconnCount = -1\r\n\r\n  constructor(props: IProps) {\r\n    super(props)\r\n\r\n    this.connMgr = new ConnectionManager()\r\n    this.flowMgr = new FlowManager()\r\n\r\n    this.state = {\r\n      flows: this.flowMgr.showList(),\r\n      flow: null,\r\n      wsStatus: 'close',\r\n    }\r\n\r\n    this.ws = null\r\n    this.wsUnmountClose = false\r\n    this.tableBottomRef = React.createRef<HTMLDivElement>()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initWs()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.ws) {\r\n      this.wsUnmountClose = true\r\n      this.ws.close()\r\n      this.ws = null\r\n    }\r\n  }\r\n\r\n  initWs() {\r\n    if (this.ws) return\r\n\r\n    this.setState({ wsStatus: 'connecting' })\r\n\r\n    let host\r\n    if (process.env.NODE_ENV === 'development') {\r\n      host = 'localhost:9081'\r\n    } else {\r\n      host = new URL(document.URL).host\r\n    }\r\n    this.ws = new WebSocket(`ws://${host}/echo`)\r\n    this.ws.binaryType = 'arraybuffer'\r\n\r\n    this.ws.onopen = () => {\r\n      this.wsReconnCount = -1\r\n      this.setState({ wsStatus: 'open' })\r\n    }\r\n\r\n    this.ws.onerror = evt => {\r\n      console.error('ERROR:', evt)\r\n      this.ws?.close()\r\n    }\r\n\r\n    this.ws.onclose = () => {\r\n      this.setState({ wsStatus: 'close' })\r\n      if (this.wsUnmountClose) return\r\n\r\n      this.wsReconnCount++\r\n      this.ws = null\r\n      const waitSeconds = wsReconnIntervals[this.wsReconnCount] || wsReconnIntervals[wsReconnIntervals.length - 1]\r\n      console.info(`will reconnect after ${waitSeconds} seconds`)\r\n      setTimeout(() => {\r\n        this.initWs()\r\n      }, waitSeconds * 1000)\r\n    }\r\n\r\n    this.ws.onmessage = evt => {\r\n      const msg = parseMessage(evt.data)\r\n      if (!msg) {\r\n        console.error('parse error:', evt.data)\r\n        return\r\n      }\r\n      // console.log('msg:', msg)\r\n\r\n      if (msg.type === MessageType.CONN) {\r\n        this.connMgr.add(msg.id, msg.content as IConnection)\r\n        this.setState({ flows: this.state.flows })\r\n      }\r\n      else if (msg.type === MessageType.CONN_CLOSE) {\r\n        this.connMgr.delete(msg.id)\r\n      }\r\n      else if (msg.type === MessageType.REQUEST) {\r\n        const flow = new Flow(msg, this.connMgr)\r\n        flow.getConn()\r\n        this.flowMgr.add(flow)\r\n\r\n        let shouldScroll = false\r\n        if (this.tableBottomRef?.current && isInViewPort(this.tableBottomRef.current)) {\r\n          shouldScroll = true\r\n        }\r\n        this.setState({ flows: this.flowMgr.showList() }, () => {\r\n          if (shouldScroll) {\r\n            this.tableBottomRef?.current?.scrollIntoView({ behavior: 'auto' })\r\n          }\r\n        })\r\n      }\r\n      else if (msg.type === MessageType.REQUEST_BODY) {\r\n        const flow = this.flowMgr.get(msg.id)\r\n        if (!flow) return\r\n        flow.addRequestBody(msg)\r\n        this.setState({ flows: this.state.flows })\r\n      }\r\n      else if (msg.type === MessageType.RESPONSE) {\r\n        const flow = this.flowMgr.get(msg.id)\r\n        if (!flow) return\r\n        flow.getConn()\r\n        flow.addResponse(msg)\r\n        this.setState({ flows: this.state.flows })\r\n      }\r\n      else if (msg.type === MessageType.RESPONSE_BODY) {\r\n        const flow = this.flowMgr.get(msg.id)\r\n        if (!flow || !flow.response) return\r\n        flow.addResponseBody(msg)\r\n        this.setState({ flows: this.state.flows })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { flows } = this.state\r\n    return (\r\n      <div className=\"main-table-wrap\">\r\n        <div className=\"top-control\">\r\n          <div><Button size=\"sm\" onClick={() => {\r\n            this.flowMgr.clear()\r\n            this.setState({ flows: this.flowMgr.showList(), flow: null })\r\n          }}>Clear</Button></div>\r\n          <div>\r\n            <Form.Control\r\n              size=\"sm\" placeholder=\"Filter\"\r\n              onChange={(e) => {\r\n                const value = e.target.value\r\n                this.flowMgr.changeFilterLazy(value, () => {\r\n                  this.setState({ flows: this.flowMgr.showList() })\r\n                })\r\n              }}\r\n            >\r\n            </Form.Control>\r\n          </div>\r\n\r\n          <BreakPoint onSave={rules => {\r\n            const msg = buildMessageMeta(SendMessageType.CHANGE_BREAK_POINT_RULES, rules)\r\n            if (this.ws) this.ws.send(msg)\r\n          }} />\r\n\r\n          <span>status: {this.state.wsStatus}</span>\r\n        </div>\r\n\r\n        <div className=\"table-wrap-div\">\r\n          <Table striped bordered size=\"sm\" style={{ tableLayout: 'fixed' }}>\r\n            <thead>\r\n              <tr>\r\n                <th style={{ width: '50px' }}>No</th>\r\n                <th style={{ width: '80px' }}>Method</th>\r\n                <th style={{ width: '200px' }}>Host</th>\r\n                <th style={{ width: 'auto' }}>Path</th>\r\n                <th style={{ width: '150px' }}>Type</th>\r\n                <th style={{ width: '80px' }}>Status</th>\r\n                <th style={{ width: '90px' }}>Size</th>\r\n                <th style={{ width: '90px' }}>Time</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                flows.map(f => {\r\n                  const fp = f.preview()\r\n\r\n                  return (\r\n                    <FlowPreview\r\n                      key={fp.id}\r\n                      flow={fp}\r\n                      isSelected={(this.state.flow && this.state.flow.id === fp.id) ? true : false}\r\n                      onShowDetail={() => {\r\n                        this.setState({ flow: f })\r\n                      }}\r\n                    />\r\n                  )\r\n                })\r\n              }\r\n            </tbody>\r\n          </Table>\r\n          <div ref={this.tableBottomRef} id=\"hidden-bottom\" style={{ height: '0px', visibility: 'hidden', marginBottom: '1px' }}></div>\r\n        </div>\r\n\r\n        <ViewFlow\r\n          flow={this.state.flow}\r\n          onClose={() => { this.setState({ flow: null }) }}\r\n          onReRenderFlows={() => { this.setState({ flows: this.state.flows }) }}\r\n          onMessage={msg => { if (this.ws) this.ws.send(msg) }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}